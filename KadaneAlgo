
public class KadaneAlgorithm {

//     Problem Statement: Given an integer array arr, find the contiguous subarray (containing at least one number) 
// which has the largest sum and returns its sum and prints the subarray.


// A subarray with a sum less than 0 will always reduce our answer and so this type of subarray cannot
//  be a part of the subarray with maximum sum.

    public static int subArraySum(int nums[])
    {
        int n=nums.length;
        int max=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if(sum>max){
                max=sum;
            }
            if(sum<0)
            {
                sum=0;
            }

        }
        return max;
    }
    public static void main(String[] args) {
        int nums[]={-2,1,-3,4,-1,2,1,-5,4};
        int res=subArraySum(nums);
        System.out.println(res);
    }
    
}
