
//AddFirst-->0-40-30-20-10
//AddLast-->10-20-30-40-50



public class LinkedList {

    class Node{
        int data;
        Node next;
        Node(int data)
        {
            this.data=data;
        }
    }
    Node head;
    Node tail;
    int size;
    public void addFirst(int item) 
    {
        Node nn=new Node(item);
        if(this.size==0)
        {
            this.head=nn;
            this.tail=nn;
            this.size++;
        }
        else{
            nn.next=this.head;
            this.head=nn;
            this.size++;

        }
    }
    public void addLast(int item)
    {
      
        if(this.size==0)
        {
           addFirst(item);
        }
        else{
            Node nn=new Node(item);
            this.tail.next=nn;
            this.tail=nn;
            this.size++;

        }

    }

public void addAtIndex(int item,int idx) throws Exception
{
    if(idx<0 || idx>size)
    {
        throw new Exception("Index out od bound");
    }
    if(idx==0){
        addFirst(item);
    }
    else if (idx==size) {
        addLast(item);
     }
     else{
        Node nn=new Node(idx);
        Node K_1th=getNode(idx-1);
        nn.next=K_1th.next;
        K_1th.next=nn;
        this.size++;
    }
}


//get element from Linked List

public int getFirst() throws Exception
{
    if(head==null)
    {
        throw new Exception("Linked List Khali Hai");
    }
    return this.head.data;
}
public int getLast() throws Exception
{
    if(head==null)
    {
        throw new Exception("Linked List Khali Hai");
    }
    return this.tail.data;
}

public int getatIndex(int idx) throws Exception
{
    return getNode(idx).data;
}

private Node getNode(int idx) throws Exception
{
    if(idx<0 || idx>=size)
    {
        throw new Exception("Index out od bound");
    }
    Node temp=head;
    for(int i=1;i<=idx;i++)
    {
        temp=temp.next;
    }
    return temp;
}



//remove elements


public int removeFirst() throws Exception
{
    if(head==null)
    {
        throw new Exception("Linked List Khali Hai");
    }
    Node temp=this.head;
    this.head=this.head.next;
    temp.next=null;
    this.size--;
    return temp.data;
}

public int removeLast() throws Exception
{
    if(head==null)
    {
        throw new Exception("Linked List Khali Hai");
    }
    if(this.size==1)
    {
        return removeFirst();
    }
    Node temp=getNode(this.size-2);
    int remove=tail.data;
    this.tail=temp;
    this.tail.next=null;
    this.size--;
    return remove;
}


public int removeatanyIndex(int idx) throws Exception
{
    if(idx<0 || idx>=size)
    {
        throw new Exception("Index out od bound");
    }
    if(this.size==0)
    {
        return removeFirst();
    }
    else if(idx==this.size-1)
    {
        return removeLast();
    }
    else{
            Node kth=getNode(idx);
            Node K_1th=getNode(idx-1);
            K_1th.next=kth.next;
            kth.next=null;
            this.size--;
            return kth.data;
    }

}
    public void display()
    {
        Node temp=this.head;
        while(temp!=null)
        {
            System.out.print(temp.data+"-->");
            temp=temp.next;
        }

    }

    
}
